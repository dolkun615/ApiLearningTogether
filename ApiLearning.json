{
	"info": {
		"_postman_id": "baf3ab82-ee04-4068-8b1f-3dab699da301",
		"name": "Api Learning",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User End To End Flow",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ensure All Users Are Retrieved\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    let response = pm.response.json(); \r",
									"    pm.expect(response.meta.pagination.total).to.exist;\r",
									"    pm.expect(response.meta.pagination.pages).to.exist;\r",
									"    pm.expect(response.meta.pagination.page).to.equal(1);\r",
									"    pm.expect(response.meta.pagination.limit).to.equal(20);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{accessToken}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "go rest token",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user-api-url}}/public/v1/users",
							"host": [
								"{{user-api-url}}"
							],
							"path": [
								"public",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create A New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ensure New User Is Created\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response.meta).to.equal(null);\r",
									"    pm.expect(response.data.id).to.exist;\r",
									"    pm.expect(response.data.name).to.exist;\r",
									"    pm.expect(response.data.email).to.exist;\r",
									"    pm.expect(response.data.gender).to.exist;\r",
									"    pm.expect(response.data.status).to.exist;\r",
									"\r",
									"    let uniqueId = response.data.id;\r",
									"    pm.environment.set(\"uniqueId\", uniqueId);\r",
									"    console.log(uniqueId);\r",
									"    \r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomFullName = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"pm.environment.set(\"randomFullName\", randomFullName);\r",
									"console.log(randomFullName);\r",
									"\r",
									"let randomEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"pm.environment.set(\"randomEmail\", randomEmail);\r",
									"console.log(randomEmail);\r",
									"\r",
									"// let gender = pm.variables.replaceIn('{{$gender}}');\r",
									"// console.log(gender);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{accessToken}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "go rest token",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"id\": 3,\r\n            \"name\": \"{{randomFullName}}\",\r\n            \"email\": \"{{randomEmail}}\",\r\n            \"gender\": \"female\",\r\n            \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user-api-url}}/public/v1/users",
							"host": [
								"{{user-api-url}}"
							],
							"path": [
								"public",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify New User is Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ensure New Customer Has Been Retrieved\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response.data.name).to.equal(pm.environment.get(\"randomFullName\"));\r",
									"    pm.expect(response.data.email).to.equal(pm.environment.get(\"randomEmail\"));\r",
									"    pm.expect(response.data.gender).to.equal(\"female\");\r",
									"    pm.expect(response.data.status).to.equal(\"inactive\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenName",
									"value": "go rest token",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{accessToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user-api-url}}/public/v1/users/{{uniqueId}}",
							"host": [
								"{{user-api-url}}"
							],
							"path": [
								"public",
								"v1",
								"users",
								"{{uniqueId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ensure Custoemr Name is Updated\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let randomEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"// //pm.environment.set(\"randomEmail\", randomEmail);\r",
									"// console.log(randomEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{accessToken}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "go rest token",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"id\": 3,\r\n            \"name\": \"{{randomFullName}}\",\r\n            \"email\": \"{{randomEmail}}\",\r\n            \"gender\": \"female\",\r\n            \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user-api-url}}/public/v1/users/{{uniqueId}}",
							"host": [
								"{{user-api-url}}"
							],
							"path": [
								"public",
								"v1",
								"users",
								"{{uniqueId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify New User Data is Updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Enusere User's Detail is Updated\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response.data.id).to.equal(pm.environment.get(\"uniqueId\"));\r",
									"    pm.expect(response.data.name).to.equal(pm.environment.get(\"randomFullName\"));\r",
									"    pm.expect(response.data.email).to.equal(pm.environment.get(\"randomEmail\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{accessToken}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "go rest token",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user-api-url}}/public/v1/users/{{uniqueId}}",
							"host": [
								"{{user-api-url}}"
							],
							"path": [
								"public",
								"v1",
								"users",
								"{{uniqueId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ensure User is Deleted\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{accessToken}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "go rest token",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{user-api-url}}/public/v1/users/{{uniqueId}}",
							"host": [
								"{{user-api-url}}"
							],
							"path": [
								"public",
								"v1",
								"users",
								"{{uniqueId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify New User is Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ensure User Data is Deleted\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    let response =  pm.response.json();\r",
									"    pm.expect(response.data.message).to.equal(\"Resource not found\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{accessToken}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "go rest token",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user-api-url}}/public/v1/users/{{uniqueId}}",
							"host": [
								"{{user-api-url}}"
							],
							"path": [
								"public",
								"v1",
								"users",
								"{{uniqueId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}